/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/characters/bunny.gltf -o src/components/Bunny.tsx -t 
*/

import { useEffect, useRef } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { AnimationClip, SkinnedMesh, Bone, MeshStandardMaterial, Group } from 'three'

import type { CharacterProps } from '../types'

type ActionName =
  | 'Death'
  | 'Duck'
  | 'HitReact'
  | 'Idle'
  | 'Jump'
  | 'Jump_Idle'
  | 'Jump_Land'
  | 'No'
  | 'Punch'
  | 'Run'
  | 'Walk'
  | 'Wave'
  | 'Weapon'
  | 'Yes'

interface GLTFActions extends AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Cube074: SkinnedMesh
    Cube074_1: SkinnedMesh
    Cube074_2: SkinnedMesh
    Cube074_3: SkinnedMesh
    Cube077: SkinnedMesh
    Cube077_1: SkinnedMesh
    Root: Bone
  }
  materials: {
    Bunny_Main: MeshStandardMaterial
    Bunny_Secondary: MeshStandardMaterial
    Eye_Black: MeshStandardMaterial
    Eye_White: MeshStandardMaterial
    ['Material.024']: MeshStandardMaterial
    ['Material.011']: MeshStandardMaterial
  }
  animations: GLTFActions[]
}

function Bunny(props: CharacterProps) {
  const group = useRef<Group>(null!)
  const { nodes, materials, animations } = useGLTF('characters/bunny.gltf') as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)

  useEffect(() => {
    const resetAction = actions.Idle!.reset()
    const fadeInAction = resetAction.fadeIn(0.5)
    fadeInAction.play()

    return () => {
      const fadeOutAction = actions.Idle!.fadeOut(0.5)
      fadeOutAction.stop()
    }
  }, [actions])
  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Scene'>
        <group name='CharacterArmature'>
          <primitive object={nodes.Root} />
          <group name='Bunny'>
            <skinnedMesh
              name='Cube074'
              geometry={nodes.Cube074.geometry}
              material={materials.Bunny_Main}
              skeleton={nodes.Cube074.skeleton}
            />
            <skinnedMesh
              name='Cube074_1'
              geometry={nodes.Cube074_1.geometry}
              material={materials.Bunny_Secondary}
              skeleton={nodes.Cube074_1.skeleton}
            />
            <skinnedMesh
              name='Cube074_2'
              geometry={nodes.Cube074_2.geometry}
              material={materials.Eye_Black}
              skeleton={nodes.Cube074_2.skeleton}
            />
            <skinnedMesh
              name='Cube074_3'
              geometry={nodes.Cube074_3.geometry}
              material={materials.Eye_White}
              skeleton={nodes.Cube074_3.skeleton}
            />
          </group>
          <group name='Carrot'>
            <skinnedMesh
              name='Cube077'
              geometry={nodes.Cube077.geometry}
              material={materials['Material.024']}
              skeleton={nodes.Cube077.skeleton}
            />
            <skinnedMesh
              name='Cube077_1'
              geometry={nodes.Cube077_1.geometry}
              material={materials['Material.011']}
              skeleton={nodes.Cube077_1.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('characters/bunny.gltf')

export default Bunny
